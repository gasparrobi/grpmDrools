import drooser.User


rule "Set Discount for employees"
    lock-on-active true
    salience 1
    when
        user : User(type == "groupama")
    then
        System.out.println("user got 10% groupama discount");
        user.setDiscount(10);
     end

rule "Set Discount for non-employees"
    lock-on-active true
    salience 2
    when
        user : User(type != "groupama")
    then
        System.out.println("user got 5% discount");
        user.setDiscount(5);
     end

rule "Approve user"
    lock-on-active true
    salience 3
    when
        // same as:
        // user : User(testResult > 80 && approved == false && licenseAge > 3)
        $user : User(getTestResult() > 80 && getApproved() == false && getLicenseAge() > 3)
    then
        System.out.println("user is approved");
        modify($user){
            setApproved(true),
            setDiscount(10)
        }
     end

rule "Decline user"
    salience 4
    lock-on-active true
    when
        user : User(getTestResult() < 80 || getLicenseAge() <= 3)
    then
        System.out.println("user is declined");
        user.setApproved(false);
     end

// When modify is used Drools re-evaluate and re-activate the rules
// if lock-on-active is set to true, the rule never gets re-activated
// Trying to cause an infinite loop here:

rule "Set test result for approval"
    // comment out to cause infinite loop
    lock-on-active true
    when
        user : User(testResult < 80)
    then
        System.out.println("test result set for 90");
        modify(user){
            setTestResult(90)
        };
     end

rule "Set test result for rejection"
    // comment out to cause infinite loop
    lock-on-active true
    when
        user : User(testResult > 80)
    then
        System.out.println("test result set for 70");
        modify(user){
            setTestResult(70)
        }

     end

//
//declare Person
//    type : String @key
//    discount : Integer @key
//    testResult : Integer
//    approved : Boolean
//end